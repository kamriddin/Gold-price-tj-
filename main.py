import os
import logging
import aiohttp
import asyncio
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    raise ValueError("‚ùå API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_language = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
buttons = {
    "ru": ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìà –ó–æ–ª–æ—Ç–æ"), KeyboardButton(text="üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")],
            [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
        ],
        resize_keyboard=True
    ),
    "tj": ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìà –ù–∞—Ä—Ö–∏ —Ç–∏–ª–ª–æ"), KeyboardButton(text="üí± “ö—É—Ä–±–∏ –∞—Å—ä–æ—Ä")],
            [KeyboardButton(text="üåê –ó–∞–±–æ–Ω—Ä–æ –∏–≤–∞–∑ –∫—É–Ω")]
        ],
        resize_keyboard=True
    )
}

def get_kitco_gold_price():
    try:
        resp = requests.get("https://www.kitco.com/gold-price-today-usa/", headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
        soup = BeautifulSoup(resp.text, "html.parser")
        tag = soup.find("div", class_="price")
        if tag:
            text = tag.get_text().strip().replace("$", "").replace(",", "")
            return float(text)
    except:
        return None

async def fetch_currency_rates():
    async with aiohttp.ClientSession() as s:
        r = await s.get("https://api.exchangerate.host/latest?base=USD&symbols=TJS,EUR,RUB")
        data = await r.json()
    return data["rates"].get("TJS"), data["rates"].get("EUR"), data["rates"].get("RUB")

def calculate_gold_prices(oz_price, usd_tjs):
    if not oz_price or not usd_tjs:
        return None
    usd_g = oz_price / 31.1035 - 4
    tjs_g = usd_g * usd_tjs
    return {p: round(tjs_g * (float(p) / 999.9), 2) for p in ["999.9", "750", "585", "375"]}

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    user_language[message.from_user.id] = "ru"
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=buttons["ru"])

@dp.message(F.text.startswith("üåê"))
async def cmd_lang(message: types.Message):
    user_id = message.from_user.id
    current_lang = user_language.get(user_id, "ru")
    new_lang = "tj" if current_lang == "ru" else "ru"
    user_language[user_id] = new_lang
    await message.answer("–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω." if new_lang == "ru" else "–ó–∞–±–æ–Ω –∏–≤–∞–∑ —à—É–¥.", reply_markup=buttons[new_lang])

@dp.message(F.text.in_(["üìà –ó–æ–ª–æ—Ç–æ", "üìà –ù–∞—Ä—Ö–∏ —Ç–∏–ª–ª–æ"]))
async def cmd_gold(message: types.Message):
    lang = user_language.get(message.from_user.id, "ru")
    oz_price = await asyncio.to_thread(get_kitco_gold_price)
    usd_tjs, eur, rub = await fetch_currency_rates()
    prices = calculate_gold_prices(oz_price, usd_tjs)
    if not prices:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö" if lang == "ru" else "‚ö†Ô∏è –•–∞—Ç–æ –¥–∞—Ä –º–∞—ä–ª—É–º–æ—Ç")
        return

    header = "üí∞ –¶–µ–Ω–∞ –Ω–∞ –∑–æ–ª–æ—Ç–æ:" if lang == "ru" else "üí∞ –ù–∞—Ä—Ö–∏ —Ç–∏–ª–ª–æ:"
    text = header + "\n\n" + "\n".join([f"{k} ‚Äî {v} —Å–æ–º–æ–Ω”£" for k, v in prices.items()])
    text += f"\n\n–ë–∏—Ä–∂–µ–≤–∞—è —Ü–µ–Ω–∞: ${oz_price}\n–ö—É—Ä—Å USD: {round(usd_tjs, 2)} TJS"
    await message.answer(text)

@dp.message(F.text.in_(["üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "üí± “ö—É—Ä–±–∏ –∞—Å—ä–æ—Ä"]))
async def cmd_currency(message: types.Message):
    lang = user_language.get(message.from_user.id, "ru")
    usd_tjs, eur, rub = await fetch_currency_rates()

    if lang == "ru":
        text = (
            f"üí± USD‚ÜíTJS: {round(usd_tjs, 2)}\n"
            f"EUR‚ÜíTJS: {round(usd_tjs * eur, 2)}\n"
            f"RUB‚ÜíTJS: {round(usd_tjs * rub, 2)}"
        )
    else:
        text = (
            f"üí± –î–æ–ª–ª–∞—Ä‚Üí—Å–æ–º–æ–Ω”£: {round(usd_tjs, 2)}\n"
            f"–ï–≤—Ä–æ‚Üí—Å–æ–º–æ–Ω”£: {round(usd_tjs * eur, 2)}\n"
            f"–†—É–±–ª‚Üí—Å–æ–º–æ–Ω”£: {round(usd_tjs * rub, 2)}"
        )

    await message.answer(text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
